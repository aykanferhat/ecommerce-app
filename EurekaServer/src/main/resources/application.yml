
server:
  port: ${EUREKA_PORT:8761}

spring:
  application:
    name: @application.name@

eureka:
  instance:
    hostname: ${EUREKA_HOST:localhost}
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 2
    # leaseExpirationDurationInSeconds
    #   Indicates the time that the eureka server waits since it received the last heartbeat before it can remove this instance from its view.
    #   See com.netflix.appinfo.EurekaInstanceConfig.java
    leaseExpirationDurationInSeconds: 6
    statusPageUrlPath: ${server.contextPath}${management.context-path}/info
    healthCheckUrlPath: ${server.contextPath}${management.context-path}/health
    metadataMap:
      ## TODO: Check if adding ${eureka.instance.hostname} to instanceId is necessary.
      ## You can check this by starting two instances of the same application on different hosts.
      # instanceId: ${spring.application.name}@${eureka.instance.hostname}:${spring.application.instance_id:${server.port}}
      instanceId: ${spring.application.name}:${spring.application.instance_id}:${server.port}
  client:
    registryFetchIntervalSeconds: 5
    registerWithEureka: false
    fetchRegistry: false
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka/
  server:
    enableSelfPreservation: false
    evictionIntervalTimerInMs: 5000
    peerNodeConnectionIdleTimeoutSeconds: 5
    renewalThresholdUpdateIntervalMs: 10000
    peerEurekaStatusRefreshTimeIntervalMs: 10000
    peerEurekaNodesUpdateIntervalMs: 10000
    waitTimeInMsWhenSyncEmpty: 0

logging:
  level:
    com.netflix.discovery: INFO
    org.springframework.boot.actuate.audit.listener: WARN
    org.springframework.cloud: INFO
    org.springframework.web: INFO
